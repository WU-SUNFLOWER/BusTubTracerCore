#include "myapi/process_record_context.h"
#include "execution/plans/abstract_plan.h"
#include "execution/executors/abstract_executor.h"

void ProcessRecordContext::AddToExecRecorder(const bustub::AbstractPlanNode *plan_node, const bustub::Tuple &tuple) {
    bustub::plan_node_id_t plan_node_id = plan_node->id_;
    
    if (exec_recorder_.find(plan_node_id) == exec_recorder_.end()) {
        exec_recorder_.insert({ plan_node_id, { { tuple }, &plan_node->OutputSchema() } });
    } else {
        exec_recorder_[plan_node_id].first.push_back(tuple);
    }
}

void ProcessRecordContext::SaveExecutionRecord() {
    for (const auto &node_record : exec_recorder_) {
        // Unpack the node record of a execution tree node.
        auto &[node_id, temp_table_record] = node_record;
        auto &[tuples, schema] = temp_table_record;

        // Deal with the tuples generated by the execution tree node.
        rapidjson::Value output_table_json(rapidjson::kArrayType);
        // Save the column names.
        rapidjson::Value table_column_names_json(rapidjson::kArrayType);
        for (uint32_t i = 0; i < schema->GetColumnCount(); ++i) {
        auto column = schema->GetColumn(i);
        table_column_names_json.PushBack(rapidjson::Value(column.GetName().c_str(), allocator_), allocator_);
        }
        output_table_json.PushBack(table_column_names_json, allocator_);
        // Save the real tuples.
        for (const auto &tuple : tuples) {
        rapidjson::Value output_tuple_json(rapidjson::kArrayType);
        for (uint32_t i = 0; i < schema->GetColumnCount(); ++i) {
            bustub::Value value = tuple.GetValue(schema, i);
            output_tuple_json.PushBack(rapidjson::Value(value.ToString().c_str(), allocator_), allocator_);
        }
        output_table_json.PushBack(output_tuple_json, allocator_);
        }

        rapidjson::Value json_node_record(rapidjson::kObjectType);
        json_node_record.AddMember("bound_planner_node_id", node_id, allocator_);
        json_node_record.AddMember("output_table", output_table_json, allocator_);

        exec_tree_record_.PushBack(json_node_record, allocator_);
    }
}

void ProcessRecordContext::Save(rapidjson::Value &wrapper) {
    //SaveExecutionRecord();
    wrapper.AddMember("planner_tree", planner_tree_record_, allocator_);
    wrapper.AddMember("optimized_planner_tree", opt_planner_tree_record_, allocator_);
    wrapper.AddMember("executor_tree", exec_tree_record_, allocator_);
}